# Dockerfile located at BE/API-gateway/Dockerfile
# --- Build context should be BE/ ---

# ---------------- Stage 1: Build the application ----------------
FROM maven:3.9-eclipse-temurin-17 AS builder

WORKDIR /build

# Copy the parent POM (BE/pom.xml)
COPY pom.xml .

# Copy the specific module's POM and source code (BE/API-gateway/*)
COPY API-gateway/pom.xml ./API-gateway/
COPY API-gateway/src ./API-gateway/src/

# Run Maven targeting the specific module's POM file
# Maven will find parent at /build/pom.xml via relativePath
RUN mvn -f API-gateway/pom.xml clean package -DskipTests

# ---------------- Stage 2: Create the final runtime image ----------------
FROM eclipse-temurin:17-jre-alpine

WORKDIR /app

# Copy the JAR from the module's target directory
COPY --from=builder /build/API-gateway/target/API-gateway-0.0.1-SNAPSHOT.jar /app/app.jar

EXPOSE 8080
ENTRYPOINT ["java", "-jar", "/app/app.jar"]
# Dockerfile located at BE/API-gateway/Dockerfile
# --- Build context is BE/API-gateway/ ---

# ---------------- Stage 1: Build the application ----------------
FROM maven:3.9-eclipse-temurin-17 AS builder

# Set a working directory in the build stage
WORKDIR /build

# --- Strategy: Build the parent first to make it available ---
# Copy ONLY the parent POM file from the directory above the context
# NOTE: This COPY from outside the context might be disallowed by Docker security.
# If disallowed, you need to structure your repo/build differently OR
# use a different build strategy (like building everything in one stage).
# --- LET'S TRY A MORE ROBUST MULTI-STAGE APPROACH INSTEAD ---

# Create a base build stage that has the parent POM installed
FROM maven:3.9-eclipse-temurin-17 AS parent-builder
WORKDIR /parent-build
COPY ../pom.xml .
# Run install on parent POM only to make it available in local repo
# Use -N to avoid recursion into modules it doesn't know about
RUN mvn install -N

# --- Main build stage for the specific module ---
FROM maven:3.9-eclipse-temurin-17 AS module-builder
WORKDIR /build

# Copy the pre-built local Maven repository from the parent-builder stage
COPY --from=parent-builder /root/.m2 /root/.m2

# Copy the module's pom.xml and src (relative to BE/API-gateway/ context)
COPY pom.xml .
COPY src ./src/

# Build ONLY this module. Maven will find the parent in the copied local repo.
# No need for -f as pom.xml is in the WORKDIR.
RUN mvn clean package -DskipTests

# ---------------- Stage 2: Create the final runtime image ----------------
FROM eclipse-temurin:17-jre-alpine

WORKDIR /app

# Copy the specific JAR generated by the module-builder stage
COPY --from=module-builder /build/target/API-gateway-0.0.1-SNAPSHOT.jar /app/app.jar

EXPOSE 8080

ENTRYPOINT ["java", "-jar", "/app/app.jar"]
